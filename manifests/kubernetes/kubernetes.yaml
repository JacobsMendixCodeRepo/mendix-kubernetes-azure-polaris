apiVersion: "v1"
kind: "List"
items:
        
  - apiVersion: apps/v1
    kind: "Deployment"
    metadata:
      name: #{k8s.namespace}#-slave
      namespace: #{k8s.namespace}#
    spec:
      replicas: #{k8s.replicas}# # tells deployment to run 1 pod matching the template
      selector:
        matchLabels:
            name: "#{k8s.namespace}#-slave"
            app: "#{k8s.namespace}#"
            containertype: "slave"
      template: # create pods using pod definition in this template
        metadata:
          annotations:
            ad.datadoghq.com/#{k8s.namespace}#-slave.logs: "[{\"source\": \"mendix\", \"service\": \"#{k8s.namespace}#-slave\", \"log_processing_rules\": [{\"type\": \"multi_line\", \"pattern\": \"^(TRACE - |TRACE:|DEBUG - |DEBUG:|INFO - |INFO:|WARNING - |WARNING:|ERROR - |ERROR:|CRITICAL - |CRITICAL:)\", \"name\": \"new_log_start_with_date\"}]}]"
            ad.datadoghq.com/#{k8s.namespace}#-slave.check_names: "[\"prometheus\"]"
            ad.datadoghq.com/#{k8s.namespace}#-slave.init_configs: "[{}]"
            ad.datadoghq.com/#{k8s.namespace}#-slave.instances: "[{\"prometheus_url\": \"http://%%host%%:%%port%%/metrics\",\"namespace\": \"mendix\",\"metrics\": [\"*\"]}]"
            devops_release: "#{Release.DeploymentID}#"
          labels:
            name: "#{k8s.namespace}#-slave"
            app: "#{k8s.namespace}#"
            containertype: "slave"
        spec:
          affinity:
            podAntiAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 100
                podAffinityTerm:
                  labelSelector:
                    matchExpressions:
                      - key: "app"
                        operator: In
                        values:
                        - "#{k8s.namespace}#"
                  topologyKey: "kubernetes.io/hostname"
          automountServiceAccountToken: false
          securityContext:
            runAsNonRoot: true
            runAsUser: 1050
            runAsGroup: 999
          imagePullSecrets:
              - name: registry
          containers:
          - name: #{k8s.namespace}#-slave
            securityContext:
               privileged: false
               runAsNonRoot: true
               allowPrivilegeEscalation: false
               runAsUser: 1050
               runAsGroup: 999
            image: #{docker.registry}#/#{docker.repository}#/#{appname}#:#{Release.Artifacts.DockerBuild.SourceVersion}#-#{Release.Artifacts.DockerBuild.BuildId}#
            ports:
            - containerPort: 8080
            - containerPort: 9273
            livenessProbe:
               httpGet:
                 path: /
                 port: 8080
               initialDelaySeconds: 120
               periodSeconds: 5
            readinessProbe:
               httpGet:
                 path: /
                 port: 8080
               initialDelaySeconds: 90
               periodSeconds: 5
            resources:
              requests:
                memory: "#{k8s.memoryrequest_slave}#"
                cpu: "#{k8s.cpurequest_slave}#"
              limits:
                memory: "#{k8s.memorylimit_slave}#"
                cpu: "#{k8s.cpulimit_slave}#"
            env:
              - name: CF_INSTANCE_INDEX
                value: "1"
              - name: MXRUNTIME_com_mendix_core_StorageService
                value: "#{customruntime.MXRUNTIME_com_mendix_core_StorageService}#"
              - name: MXRUNTIME_com_mendix_storage_azure_AccountName
                value: "#{customruntime.MXRUNTIME_com_mendix_storage_azure_AccountName}#"
              - name: MXRUNTIME_com_mendix_storage_azure_AccountKey
                value: "#{customruntime.MXRUNTIME_com_mendix_storage_azure_AccountKey}#"
              - name: MXRUNTIME_com_mendix_storage_azure_Container
                value: "#{customruntime.MXRUNTIME_com_mendix_storage_azure_Container}#"                
              - name: MXRUNTIME_com_mendix_storage_s3_AccessKeyId
                value: "#{customruntime.MXRUNTIME_com_mendix_storage_s3_AccessKeyId}#"
              - name: MXRUNTIME_com_mendix_storage_s3_SecretAccessKey
                value: "#{customruntime.MXRUNTIME_com_mendix_storage_s3_SecretAccessKey}#"
              - name: MXRUNTIME_com_mendix_storage_s3_BucketName
                value: "#{customruntime.MXRUNTIME_com_mendix_storage_s3_BucketName}#"
              - name: MXRUNTIME_com_mendix_storage_PerformDeleteFromStorage
                value: "false"
              - name: "MXRUNTIME_ApplicationRootUrl"
                value: "#{customruntime.MXRUNTIME_ApplicationUrl}#"
            envFrom:
            - configMapRef:
                name: mendix-config

  - apiVersion: apps/v1
    kind: "Deployment"
    metadata:
      name: #{k8s.namespace}#-leader
      namespace: #{k8s.namespace}#
    spec:
      replicas: 1 # tells deployment to run 1 pod matching the template
      selector:
        matchLabels:
            app: "#{k8s.namespace}#"
            containertype: "leader"
            name: "#{k8s.namespace}#-leader"
      template: # create pods using pod definition in this template
        metadata:
          annotations:  
            ad.datadoghq.com/#{k8s.namespace}#-leader.logs: "[{\"source\": \"mendix\", \"service\": \"#{k8s.namespace}#-leader\", \"log_processing_rules\": [{\"type\": \"multi_line\", \"pattern\": \"^(TRACE - |TRACE:|DEBUG - |DEBUG:|INFO - |INFO:|WARNING - |WARNING:|ERROR - |ERROR:|CRITICAL - |CRITICAL:)\", \"name\": \"new_log_start_with_date\"}]}]"
            ad.datadoghq.com/#{k8s.namespace}#-leader.check_names: "[\"prometheus\"]"
            ad.datadoghq.com/#{k8s.namespace}#-leader.init_configs: "[{}]"
            ad.datadoghq.com/#{k8s.namespace}#-leader.instances: "[{\"prometheus_url\": \"http://%%host%%:%%port%%/metrics\",\"namespace\": \"mendix\",\"metrics\": [\"*\"]}]"
            devops_release: "#{Release.DeploymentID}#"
          labels:
            app: "#{k8s.namespace}#"
            containertype: "leader"
            name: "#{k8s.namespace}#-leader"
        spec:
          affinity:
            podAntiAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 100
                podAffinityTerm:
                  labelSelector:
                    matchExpressions:
                      - key: "app"
                        operator: In
                        values:
                        - "#{k8s.namespace}#"
                  topologyKey: "kubernetes.io/hostname"
          automountServiceAccountToken: false
          securityContext:
            runAsNonRoot: true
            runAsUser: 1050
            runAsGroup: 999
          imagePullSecrets:
              - name: registry
          containers:
          - name: #{k8s.namespace}#-leader
            securityContext:
               privileged: false
               runAsNonRoot: true
               allowPrivilegeEscalation: false
               runAsUser: 1050
               runAsGroup: 999
            image: #{docker.registry}#/#{docker.repository}#/#{appname}#:#{Release.Artifacts.DockerBuild.SourceVersion}#-#{Release.Artifacts.DockerBuild.BuildId}#
            ports:
            - containerPort: 8080
            - containerPort: 9273
            livenessProbe:
               httpGet:
                 path: /
                 port: 8080
               initialDelaySeconds: 120
               periodSeconds: 5
            readinessProbe:
               httpGet:
                 path: /
                 port: 8080
               initialDelaySeconds: 90
               periodSeconds: 5
               failureThreshold: 120 # high number to accomodate database synchronizations
            resources:
              requests:
                memory: "#{k8s.memoryrequest_leader}#"
                cpu: "#{k8s.cpurequest_leader}#"
              limits:
                memory: "#{k8s.memorylimit_leader}#" 
                cpu: "#{k8s.cpulimit_leader}#"
            env:
              - name: CF_INSTANCE_INDEX
                value: "0"
              - name: MXRUNTIME_com_mendix_core_StorageService
                value: "#{customruntime.MXRUNTIME_com_mendix_core_StorageService}#"
              - name: MXRUNTIME_com_mendix_storage_azure_AccountName
                value: "#{customruntime.MXRUNTIME_com_mendix_storage_azure_AccountName}#"
              - name: MXRUNTIME_com_mendix_storage_azure_AccountKey
                value: "#{customruntime.MXRUNTIME_com_mendix_storage_azure_AccountKey}#"
              - name: MXRUNTIME_com_mendix_storage_azure_Container
                value: "#{customruntime.MXRUNTIME_com_mendix_storage_azure_Container}#"                
              - name: MXRUNTIME_com_mendix_storage_s3_AccessKeyId
                value: "#{customruntime.MXRUNTIME_com_mendix_storage_s3_AccessKeyId}#"
              - name: MXRUNTIME_com_mendix_storage_s3_SecretAccessKey
                value: "#{customruntime.MXRUNTIME_com_mendix_storage_s3_SecretAccessKey}#"
              - name: MXRUNTIME_com_mendix_storage_s3_BucketName
                value: "#{customruntime.MXRUNTIME_com_mendix_storage_s3_BucketName}#"
              - name: MXRUNTIME_com_mendix_storage_s3_EndPoint  
                value: "#{customruntime.MXRUNTIME_com_mendix_storage_s3_EndPoint}#"
              - name: MXRUNTIME_com_mendix_storage_PerformDeleteFromStorage
                value: "false"
              - name: "MXRUNTIME_ApplicationRootUrl"
                value: "#{customruntime.MXRUNTIME_ApplicationUrl}#"            
            envFrom:
            - configMapRef:
                name: mendix-config     
                
  - apiVersion: "v1"
    kind: "Service"
    metadata:
      name: "#{k8s.namespace}#"
      namespace: "#{k8s.namespace}#"
      labels:
        app: "#{k8s.namespace}#"
    spec:
      selector:
        app: "#{k8s.namespace}#"
      ports:
      - name: http
        port: 80
        targetPort: 8080

  - apiVersion: "v1"
    kind: "Service"
    metadata:
      name: "#{k8s.namespace}#-leader"
      namespace: "#{k8s.namespace}#"
      labels:
        app: "#{k8s.namespace}#-leader"
    spec:
      selector:
        app: "#{k8s.namespace}#"
        containertype: "leader"
      ports:
      - name: http
        port: 80
        targetPort: 8080

  - apiVersion: "autoscaling/v1"
    kind: "HorizontalPodAutoscaler"
    metadata: 
      name: "#{k8s.namespace}#-slave-autoscale"
    spec: 
      maxReplicas: 20 #max replica counts
      minReplicas: 15 #min replica count
      scaleTargetRef:
        apiVersion: apps/v1
        kind: Deployment
        name: "#{k8s.namespace}#-slave"
      targetCPUUtilizationPercentage: 75 # target CPU utilization
 
